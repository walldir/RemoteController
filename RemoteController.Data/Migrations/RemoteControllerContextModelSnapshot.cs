// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RemoteController.Data.Context;

namespace RemoteController.Data.Migrations
{
    [DbContext(typeof(RemoteControllerContext))]
    partial class RemoteControllerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("RemoteController.Domain.Models.Log", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommandExeccuted");

                    b.Property<DateTime>("Data");

                    b.Property<Guid?>("MachineId")
                        .IsRequired();

                    b.Property<string>("Result");

                    b.HasKey("Id");

                    b.HasIndex("MachineId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("RemoteController.Domain.Models.Machine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id");

                    b.Property<string>("Antivirus")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("DotNetFrameworkVersion")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10);

                    b.Property<double>("HdSize");

                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(39)")
                        .HasMaxLength(39);

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<bool>("IsFirewallActive")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<string>("MacAddress")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100);

                    b.Property<double>("SpaceHdUsed");

                    b.Property<string>("WindowsVersion")
                        .HasColumnType("varchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Machines");

                    b.HasData(
                        new { Id = new Guid("356b872e-37fd-49fb-a1bf-9dc1353d869f"), Antivirus = "Norton", DotNetFrameworkVersion = "net461", HdSize = 2000000.0, IpAddress = "10.0.0.1", IsAvailable = true, IsFirewallActive = true, MacAddress = "8A-71-9B-CA-BB-D7", Name = "Waldir 01", SpaceHdUsed = 100000.0 },
                        new { Id = new Guid("4210d3ba-f838-442e-a71b-e6349a9c480e"), Antivirus = "Avast", DotNetFrameworkVersion = "net461", HdSize = 2000000.0, IpAddress = "10.0.0.2", IsAvailable = true, IsFirewallActive = true, MacAddress = "8A-71-9B-CA-BB-D4", Name = "Waldir 02", SpaceHdUsed = 100000.0 },
                        new { Id = new Guid("e5295786-b721-49c8-9197-6f0871a9ceaf"), Antivirus = "Avg", DotNetFrameworkVersion = "net461", HdSize = 2000000.0, IpAddress = "10.0.0.3", IsAvailable = false, IsFirewallActive = true, MacAddress = "8A-71-9B-CA-BB-D5", Name = "Waldir 03", SpaceHdUsed = 100000.0 }
                    );
                });

            modelBuilder.Entity("RemoteController.Domain.Models.Log", b =>
                {
                    b.HasOne("RemoteController.Domain.Models.Machine", "Machine")
                        .WithMany("Logs")
                        .HasForeignKey("MachineId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
